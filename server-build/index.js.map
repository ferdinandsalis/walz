{
  "version": 3,
  "sources": ["../server/index.ts"],
  "sourcesContent": ["import crypto from 'crypto'\nimport path from 'path'\nimport { fileURLToPath } from 'url'\nimport {\n  createRequestHandler as _createRequestHandler,\n  type RequestHandler,\n} from '@remix-run/express'\nimport {\n  broadcastDevReady,\n  installGlobals,\n  type ServerBuild,\n} from '@remix-run/node'\nimport { wrapExpressCreateRequestHandler } from '@sentry/remix'\nimport { ip } from 'address'\nimport chalk from 'chalk'\nimport chokidar from 'chokidar'\nimport closeWithGrace from 'close-with-grace'\nimport compression from 'compression'\nimport express from 'express'\nimport rateLimit from 'express-rate-limit'\nimport getPort, { portNumbers } from 'get-port'\nimport morgan from 'morgan'\n\n// @ts-ignore - this file may not exist if you haven't built yet, but it will\n// definitely exist by the time the dev or prod server actually runs.\nimport * as remixBuild from '#build/index.js'\n\ninstallGlobals({ nativeFetch: true })\n\nconst MODE = process.env.NODE_ENV\n\nconst createRequestHandler = wrapExpressCreateRequestHandler(\n  _createRequestHandler,\n)\n\nconst BUILD_PATH = '../build/index.js'\n\nconst build = remixBuild as unknown as ServerBuild\nlet devBuild = build\n\nconst app = express()\n\napp.use((req, res, next) => {\n  // Check if the request header contains 'www.'\n  if (req?.headers?.host && req?.headers?.host.slice(0, 4) === 'www.') {\n    // Remove 'www.' and redirect to non-www domain\n    const newHost = req.headers.host.slice(4)\n    return res.redirect(301, req.protocol + '://' + newHost + req.originalUrl)\n  }\n  next()\n})\n\nconst getHost = (req: { get: (key: string) => string | undefined }) =>\n  req.get('X-Forwarded-Host') ?? req.get('host') ?? ''\n\n// Ensure HTTPS only (X-Forwarded-Proto comes from Fly)\napp.use((req, res, next) => {\n  const proto = req.get('X-Forwarded-Proto')\n  const host = getHost(req)\n  if (proto === 'http') {\n    res.set('X-Forwarded-Proto', 'https')\n    res.redirect(`https://${host}${req.originalUrl}`)\n    return\n  }\n  next()\n})\n\n// Redirect old php routes\napp.get(['/index.php', '/index.php/*'], (req, res) => {\n  res.redirect('/')\n})\n\n// No ending slashes for SEO reasons\n// https://github.com/epicweb-dev/epic-stack/discussions/108\napp.use((req, res, next) => {\n  if (req.path.endsWith('/') && req.path.length > 1) {\n    const query = req.url.slice(req.path.length)\n    const safepath = req.path.slice(0, -1).replace(/\\/+/g, '/')\n    res.redirect(301, safepath + query)\n  } else {\n    next()\n  }\n})\n\napp.use(compression())\n\n// http://expressjs.com/en/advanced/best-practice-security.html#at-a-minimum-disable-x-powered-by-header\napp.disable('x-powered-by')\n\n// Remix fingerprints its assets so we can cache forever.\napp.use(\n  '/build',\n  express.static('public/build', { immutable: true, maxAge: '1y' }),\n)\n\n// Aggressively cache fonts for a year\napp.use(\n  '/fonts',\n  express.static('public/fonts', { immutable: true, maxAge: '1y' }),\n)\n\n// Everything else (like favicon.ico) is cached for an hour. You may want to be\n// more aggressive with this caching.\napp.use(express.static('public', { maxAge: '1h' }))\n\nmorgan.token('url', (req, res) => decodeURIComponent(req.url ?? ''))\napp.use(morgan('tiny'))\n\napp.use((_, res, next) => {\n  res.locals.cspNonce = crypto.randomBytes(16).toString('hex')\n  next()\n})\n\n// app.use(\n//   helmet(),\n// )\n\n// When running tests or running in development, we want to effectively disable\n// rate limiting because playwright tests are very fast and we don't want to\n// have to wait for the rate limit to reset between tests.\nconst maxMultiple =\n  MODE !== 'production' || process.env.PLAYWRIGHT_TEST_BASE_URL ? 10_000 : 1\nconst rateLimitDefault = {\n  windowMs: 60 * 1000,\n  max: 1000 * maxMultiple,\n  standardHeaders: true,\n  legacyHeaders: false,\n}\n\nconst strongestRateLimit = rateLimit({\n  ...rateLimitDefault,\n  windowMs: 60 * 1000,\n  max: 10 * maxMultiple,\n})\n\nconst strongRateLimit = rateLimit({\n  ...rateLimitDefault,\n  windowMs: 60 * 1000,\n  max: 100 * maxMultiple,\n})\n\nconst generalRateLimit = rateLimit(rateLimitDefault)\napp.use((req, res, next) => {\n  const strongPaths = [\n    '/api/newsletter',\n    '/login',\n    '/signup',\n    '/verify',\n    '/admin',\n    '/onboarding',\n    '/reset-password',\n    '/settings/profile',\n    '/resources/login',\n    '/resources/verify',\n  ]\n  if (req.method !== 'GET' && req.method !== 'HEAD') {\n    if (strongPaths.some(p => req.path.includes(p))) {\n      return strongestRateLimit(req, res, next)\n    }\n    return strongRateLimit(req, res, next)\n  }\n\n  // the verify route is a special case because it's a GET route that\n  // can have a token in the query string\n  if (req.path.includes('/verify')) {\n    return strongestRateLimit(req, res, next)\n  }\n\n  return generalRateLimit(req, res, next)\n})\n\nfunction getRequestHandler(build: ServerBuild): RequestHandler {\n  function getLoadContext(_: any, res: any) {\n    return { cspNonce: res.locals.cspNonce }\n  }\n  return createRequestHandler({ build, mode: MODE, getLoadContext })\n}\n\napp.all(\n  '*',\n  MODE === 'development'\n    ? (...args) => getRequestHandler(devBuild)(...args)\n    : getRequestHandler(build),\n)\n\nconst desiredPort = Number(process.env.PORT || 3000)\nconst portToUse = await getPort({\n  port: portNumbers(desiredPort, desiredPort + 100),\n})\n\nconst server = app.listen(portToUse, () => {\n  const addy = server.address()\n  const portUsed =\n    desiredPort === portToUse\n      ? desiredPort\n      : addy && typeof addy === 'object'\n      ? addy.port\n      : 0\n\n  if (portUsed !== desiredPort) {\n    console.warn(\n      chalk.yellow(\n        `\u26A0\uFE0F  Port ${desiredPort} is not available, using ${portUsed} instead.`,\n      ),\n    )\n  }\n  console.log(`\uD83D\uDE80  We have liftoff!`)\n  const localUrl = `http://localhost:${portUsed}`\n  let lanUrl: string | null = null\n  const localIp = ip() || ''\n  // Check if the address is a private ip\n  // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n  // https://github.com/facebook/create-react-app/blob/d960b9e38c062584ff6cfb1a70e1512509a966e7/packages/react-dev-utils/WebpackDevServerUtils.js#LL48C9-L54C10\n  if (/^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(localIp)) {\n    lanUrl = `http://${localIp}:${portUsed}`\n  }\n\n  console.log(\n    `\n${chalk.bold('Local:')}            ${chalk.cyan(localUrl)}\n${lanUrl ? `${chalk.bold('On Your Network:')}  ${chalk.cyan(lanUrl)}` : ''}\n${chalk.bold('Press Ctrl+C to stop')}\n\t\t`.trim(),\n  )\n\n  if (MODE === 'development') {\n    broadcastDevReady(build)\n  }\n})\n\ncloseWithGrace(async () => {\n  await new Promise((resolve, reject) => {\n    server.close(e => (e ? reject(e) : resolve('ok')))\n  })\n})\n\n// during dev, we'll keep the build module up to date with the changes\nif (MODE === 'development') {\n  async function reloadBuild() {\n    devBuild = await import(`${BUILD_PATH}?update=${Date.now()}`)\n    broadcastDevReady(devBuild)\n  }\n\n  const dirname = path.dirname(fileURLToPath(import.meta.url))\n  const watchPath = path.join(dirname, BUILD_PATH).replace(/\\\\/g, '/')\n  const watcher = chokidar.watch(watchPath, { ignoreInitial: true })\n  watcher.on('all', reloadBuild)\n}\n"],
  "mappings": "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",
  "names": ["build"]
}
