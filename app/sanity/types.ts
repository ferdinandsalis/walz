/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Post = {
  _id: string
  _type: 'post'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  cover?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    alt?: string
    attribution?: string
    _type: 'image'
  }
  slug?: Slug
  previewText?: string
  body?: Array<
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        alt?: string
        attribution?: string
        _type: 'image'
        _key: string
      }
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'normal'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'blockquote'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<
          | {
              href?: string
              blank?: boolean
              _type: 'link'
              _key: string
            }
          | {
              reference?: {
                _ref: string
                _type: 'reference'
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: 'post'
              }
              _type: 'internalLink'
              _key: string
            }
        >
        level?: number
        _type: 'block'
        _key: string
      }
  >
  publishedAt?: string
}

export type Testimonial = {
  _id: string
  _type: 'testimonial'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  year?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'year'
  }
  quote?: string
  achievement?: string
  photo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    attribution?: string
    alt?: string
    _type: 'image'
  }
}

export type Year = {
  _id: string
  _type: 'year'
  _createdAt: string
  _updatedAt: string
  _rev: string
  photos?: Array<{
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    takenAt?: string
    motto?: string
    caption?: string
    attribution?: string
    alt?: string
    _type: 'photo'
    _key: string
  }>
  mentor?: {
    _ref: string
    _type: 'reference'
    _weak?: boolean
    [internalGroqTypeReferenceTo]?: 'person'
  }
  letter?:
    | 'alpha'
    | 'beta'
    | 'gamma'
    | 'delta'
    | 'epsilon'
    | 'zeta'
    | 'eta'
    | 'theta'
    | 'iota'
    | 'kappa'
    | 'lambda'
    | 'my'
    | 'ny'
    | 'xi'
    | 'omikron'
    | 'pi'
    | 'hho'
    | 'sigma'
    | 'tau'
    | 'ypsilon'
    | 'phi'
    | 'chi'
    | 'psi'
    | 'omega'
  startedAt?: string
  graduatedAt?: string
  plan?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    _type: 'file'
  }
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Person = {
  _id: string
  _type: 'person'
  _createdAt: string
  _updatedAt: string
  _rev: string
  portrait?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    alt?: string
    attribution?: string
    _type: 'image'
  }
  priority?: number
  inactive?: boolean
  givenNames?: string
  familyName?: string
  description?: string
  roles?: Array<string>
  email?: string
  phone?: string
  website?: string
}

export type HomeHero = {
  _id: string
  _type: 'home-hero'
  _createdAt: string
  _updatedAt: string
  _rev: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    alt?: string
    attribution?: string
    _type: 'image'
  }
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type MediaTag = {
  _id: string
  _type: 'media.tag'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: Slug
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Post
  | Testimonial
  | Year
  | SanityFileAsset
  | Person
  | HomeHero
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | MediaTag
  | Slug
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./app/routes/_index/query.ts
// Variable: homeQuery
// Query: {  "hero": *[_type == "home-hero"][0]{    _id,    _type,    image,    "caption": image->caption,    "attribution": image->attribution  },    "testimonials": *[_type == "testimonial"] | order(_createdAt desc) {    _id,    _type,    name,    achievement,    quote,    photo,    year -> {      graduatedAt,      startedAt,      letter    }  }[0...4],  "posts": *[_type == "post"] | order(publishedAt desc) {    _id,    _type,    title,    previewText,    slug,    cover,    publishedAt  }[0...3]}
export type HomeQueryResult = {
  hero: {
    _id: string
    _type: 'home-hero'
    image: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    caption: null
    attribution: null
  } | null
  testimonials: Array<{
    _id: string
    _type: 'testimonial'
    name: string | null
    achievement: string | null
    quote: string | null
    photo: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      attribution?: string
      alt?: string
      _type: 'image'
    } | null
    year: {
      graduatedAt: string | null
      startedAt: string | null
      letter:
        | 'alpha'
        | 'beta'
        | 'chi'
        | 'delta'
        | 'epsilon'
        | 'eta'
        | 'gamma'
        | 'hho'
        | 'iota'
        | 'kappa'
        | 'lambda'
        | 'my'
        | 'ny'
        | 'omega'
        | 'omikron'
        | 'phi'
        | 'pi'
        | 'psi'
        | 'sigma'
        | 'tau'
        | 'theta'
        | 'xi'
        | 'ypsilon'
        | 'zeta'
        | null
    } | null
  }>
  posts: Array<{
    _id: string
    _type: 'post'
    title: string | null
    previewText: string | null
    slug: Slug | null
    cover: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    publishedAt: string | null
  }>
}

// Source: ./app/routes/aktuelles_.beitraege+/$slug.query.ts
// Variable: beitraegeSlugQuery
// Query: *[_type == "post" && slug.current == $slug][0] {    _id,    _type,    title,    cover,    body,    slug,    publishedAt  }
export type BeitraegeSlugQueryResult = {
  _id: string
  _type: 'post'
  title: string | null
  cover: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    caption?: string
    alt?: string
    attribution?: string
    _type: 'image'
  } | null
  body: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?:
          | 'blockquote'
          | 'h1'
          | 'h2'
          | 'h3'
          | 'h4'
          | 'h5'
          | 'h6'
          | 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<
          | {
              reference?: {
                _ref: string
                _type: 'reference'
                _weak?: boolean
                [internalGroqTypeReferenceTo]?: 'post'
              }
              _type: 'internalLink'
              _key: string
            }
          | {
              href?: string
              blank?: boolean
              _type: 'link'
              _key: string
            }
        >
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        alt?: string
        attribution?: string
        _type: 'image'
        _key: string
      }
  > | null
  slug: Slug | null
  publishedAt: string | null
} | null

// Source: ./app/routes/aktuelles_.beitraege+/_index.query.tsx
// Variable: beitraegeIndexQuery
// Query: {  "posts": *[_type == "post"] | order(publishedAt desc) {    _id,    _type,    title,    cover,    previewText,    slug,    publishedAt  },}
export type BeitraegeIndexQueryResult = {
  posts: Array<{
    _id: string
    _type: 'post'
    title: string | null
    cover: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    previewText: string | null
    slug: Slug | null
    publishedAt: string | null
  }>
}

// Source: ./app/routes/aufnahme+/ _index.query.ts
// Variable: aufnahmeQuery
// Query: {    "currentSchoolYear": *[_type == "schoolYear" && end > now()] | order(start asc) {        _id,        _type,        start,        end,        costs->{            definedAt,            list        }    }[0]}
export type AufnahmeQueryResult = {
  currentSchoolYear: null
}

// Source: ./app/routes/ueber-uns+/_index.query.ts
// Variable: ueberUnsQuery
// Query: {  "leadership": *[_type == "person" && "leadership" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {      _id,  _type,  priority,  inactive,  slug,  portrait,  givenNames,  familyName,  "name": givenNames + " " + familyName,  description,  email,  phone,  website,  publishedAt  },  "mentor": *[_type == "person" && "mentor" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {      _id,  _type,  priority,  inactive,  slug,  portrait,  givenNames,  familyName,  "name": givenNames + " " + familyName,  description,  email,  phone,  website,  publishedAt  },  "project_lead": *[_type == "person" && "project_lead" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {      _id,  _type,  priority,  inactive,  slug,  portrait,  givenNames,  familyName,  "name": givenNames + " " + familyName,  description,  email,  phone,  website,  publishedAt  },  "administrator": *[_type == "person" && "administrator" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {      _id,  _type,  priority,  inactive,  slug,  portrait,  givenNames,  familyName,  "name": givenNames + " " + familyName,  description,  email,  phone,  website,  publishedAt  },  "therapist": *[_type == "person" && "therapist" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {      _id,  _type,  priority,  inactive,  slug,  portrait,  givenNames,  familyName,  "name": givenNames + " " + familyName,  description,  email,  phone,  website,  publishedAt  }}
export type UeberUnsQueryResult = {
  leadership: Array<{
    _id: string
    _type: 'person'
    priority: number | null
    inactive: boolean | null
    slug: null
    portrait: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    givenNames: string | null
    familyName: string | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    website: string | null
    publishedAt: null
  }>
  mentor: Array<{
    _id: string
    _type: 'person'
    priority: number | null
    inactive: boolean | null
    slug: null
    portrait: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    givenNames: string | null
    familyName: string | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    website: string | null
    publishedAt: null
  }>
  project_lead: Array<{
    _id: string
    _type: 'person'
    priority: number | null
    inactive: boolean | null
    slug: null
    portrait: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    givenNames: string | null
    familyName: string | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    website: string | null
    publishedAt: null
  }>
  administrator: Array<{
    _id: string
    _type: 'person'
    priority: number | null
    inactive: boolean | null
    slug: null
    portrait: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    givenNames: string | null
    familyName: string | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    website: string | null
    publishedAt: null
  }>
  therapist: Array<{
    _id: string
    _type: 'person'
    priority: number | null
    inactive: boolean | null
    slug: null
    portrait: {
      asset?: {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
      }
      hotspot?: SanityImageHotspot
      crop?: SanityImageCrop
      caption?: string
      alt?: string
      attribution?: string
      _type: 'image'
    } | null
    givenNames: string | null
    familyName: string | null
    name: string | null
    description: string | null
    email: string | null
    phone: string | null
    website: string | null
    publishedAt: null
  }>
}

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
  interface SanityQueries {
    '{\n  "hero": *[_type == "home-hero"][0]{\n    _id,\n    _type,\n    image,\n    "caption": image->caption,\n    "attribution": image->attribution\n  },  \n  "testimonials": *[_type == "testimonial"] | order(_createdAt desc) {\n    _id,\n    _type,\n    name,\n    achievement,\n    quote,\n    photo,\n    year -> {\n      graduatedAt,\n      startedAt,\n      letter\n    }\n  }[0...4],\n  "posts": *[_type == "post"] | order(publishedAt desc) {\n    _id,\n    _type,\n    title,\n    previewText,\n    slug,\n    cover,\n    publishedAt\n  }[0...3]\n}': HomeQueryResult
    '\n*[_type == "post" && slug.current == $slug][0] {\n    _id,\n    _type,\n    title,\n    cover,\n    body,\n    slug,\n    publishedAt\n  }\n': BeitraegeSlugQueryResult
    '{\n  "posts": *[_type == "post"] | order(publishedAt desc) {\n    _id,\n    _type,\n    title,\n    cover,\n    previewText,\n    slug,\n    publishedAt\n  },\n}': BeitraegeIndexQueryResult
    '{\n    "currentSchoolYear": *[_type == "schoolYear" && end > now()] | order(start asc) {\n        _id,\n        _type,\n        start,\n        end,\n        costs->{\n            definedAt,\n            list\n        }\n    }[0]\n}': AufnahmeQueryResult
    '{\n  "leadership": *[_type == "person" && "leadership" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {\n    \n  _id,\n  _type,\n  priority,\n  inactive,\n  slug,\n  portrait,\n  givenNames,\n  familyName,\n  "name": givenNames + " " + familyName,\n  description,\n  email,\n  phone,\n  website,\n  publishedAt\n\n  },\n  "mentor": *[_type == "person" && "mentor" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {\n    \n  _id,\n  _type,\n  priority,\n  inactive,\n  slug,\n  portrait,\n  givenNames,\n  familyName,\n  "name": givenNames + " " + familyName,\n  description,\n  email,\n  phone,\n  website,\n  publishedAt\n\n  },\n  "project_lead": *[_type == "person" && "project_lead" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {\n    \n  _id,\n  _type,\n  priority,\n  inactive,\n  slug,\n  portrait,\n  givenNames,\n  familyName,\n  "name": givenNames + " " + familyName,\n  description,\n  email,\n  phone,\n  website,\n  publishedAt\n\n  },\n  "administrator": *[_type == "person" && "administrator" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {\n    \n  _id,\n  _type,\n  priority,\n  inactive,\n  slug,\n  portrait,\n  givenNames,\n  familyName,\n  "name": givenNames + " " + familyName,\n  description,\n  email,\n  phone,\n  website,\n  publishedAt\n\n  },\n  "therapist": *[_type == "person" && "therapist" in roles && (!inactive || inactive == null)] | order(priority desc, familyName asc) {\n    \n  _id,\n  _type,\n  priority,\n  inactive,\n  slug,\n  portrait,\n  givenNames,\n  familyName,\n  "name": givenNames + " " + familyName,\n  description,\n  email,\n  phone,\n  website,\n  publishedAt\n\n  }\n}': UeberUnsQueryResult
  }
}
